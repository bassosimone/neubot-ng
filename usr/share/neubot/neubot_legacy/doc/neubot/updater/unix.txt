Unix updater
''''''''''''

:Version: 1.2.1 of 2012/02/02
:Authors: Simone Basso
:Documents: neubot/updater/unix.py

This document explains briefly how the updater process works
under Unix.

The general idea is that this process runs as root in the
background (usually started at boot time).  It spawns a Neubot
agent child, which eventually will drop root privileges and
perform, as usual, periodic transmission tests.   Also, the
updater daemon periodically checks for updates and, if needed,
automatically updates Neubot, silently and in the background.
All the network-facing operations aren't performed by the
updater daemon, though.  They're carried out by an unprivileged
child.


Python 3 compatibility
``````````````````````

The first issue to discuss is Python 3 compatibility.  The code
that comprises the updater should run without modifications under
Python 2.6 as well as Python 3.  The reason is simple: if the
operating system upgrades the system Python, for sure the updater
will be able to cope with that.  Maybe the core Neubot functionality,
measuring quality and neutrality, will not be available, because
of 2to3 issues.  Still, a subsequent version may be able to do
that, and the updater will be able to fetch it.

This design decision has one drawback: some code is going to be
duplicated between neubot/updater/unix.py and neubot/system/unix.py.
I prefer to keep all the updater code in the same file, to ease
the task of making sure that it keeps working with Python 3.


Definitions
```````````

The updater process shares the definitions of BASEDIR and
VERSIONDIR with doc/MacOS/installer.txt.  The reason is simple:
this updater has been written mainly to provide automatic
updates under MacOS.

BASEDIR
  This is the base directory where Neubot is installed.
  Under MacOS this is ``/usr/local/share/neubot``.

VERSIONDIR
  The BASEDIR contains one or more VERSIONDIRs.  Each contains
  the sources of a version of Neubot.

  The VERSIONDIR is named after the version of Neubot it
  contains, expressed in numeric representation.  This is an
  alternative representation of the version number as a floating
  point.  The integer part is the major version number.  After
  the radix point the first three digits represent the minor
  number, digits 4-6 represent the patch number, and digits 7-9
  the release candidate number.  Also, there is the convention
  that a stable release has release candidate number 999.
  For example:

    0.4.0   =>    0.      004     000     999
                  ^        ^       ^       ^
                major    minor   patch   rcnum

  This notation is very handy because it allows to treat
  the version number as a floating point -- or, better, as a
  decimal.Decimal under Python.


Assumptions
```````````

Again, many assumptions depend on the fact that the updater is
being written for MacOSX.

The updater assumes that its normalized absolute path is
``BASEDIR/VERSIONDIR/neubot/updater/unix.py``.  It is very
important not to change the location of this file without
updating the code, because the updater relies on this
information to locate and import the rest of Neubot.

This assumption on the filesystem layout is also relevant
because the updater will install VERSIONDIR+1 at the following
location: ``BASEDIR/VERSIONDIR+1``.

The updater assumes that ``BASEDIR/start.sh`` is a Bourne shell
script that is able to start the newest version of Neubot,
provided that it was correctly installed.  Also, the updater
assumes that start.sh decides that a Neubot version was
correctly installed if the file ``.neubot-installed-ok`` exists
in VERSIONDIR.

The updater keeps the current version number in numeric
representation.  Here the assumption is that Neubot release
scripts will take care not only of updating the canonical
representation, e.g. 0.4.0, but also the numeric one.

The updater assumes that ``http://releases.neubot.org/``
contains the folder ``/updates/``.  And that, in turn, such
folder contains three files for each available version:
the sources tarball, the SHA256 sum and the digital
signature.  The files must be named after the numeric
representation of their version number alone, e.g.::

    /updates/
        0.004002001.tar.gz
        0.004002001.tar.gz.sha256
        0.004002001.tar.gz.sig
        0.004002999.tar.gz
        0.004002999.tar.gz.sha256
        0.004002999.tar.gz.sig

The updater assumes that OpenSSL command line tools are
installed and available in the PATH.  It needs them to
verify the digital signature of an update tarball.

The updater assumes that the user ``_neubot_update`` is
available on the system, bound to a primary group with the same
name and not associated with any real user account.  When
downloading updates the updater child will drop permanently
privileges and become that user.


High level algorithm
````````````````````

The updater processes command line options.  There are two
command line options: -D and -d.  The former forces the daemon
to run in foreground and the latter to print logs also on the
standard error.  Under MacOSX the updater is always invoked with
-D because launchd(8) does not like it if a child process
fork()s.

The updater can only be run by the root user because it needs to
impersonate at least two users: ``_neubot`` (the user of the
Neubot agent) and ``_neubot_update`` (the one used to download
updates).  Also, the updater must read and write on the file
system in order to upgrade Neubot.

The updater cleans up its own environment, while remaining
``root``.  This removes unneeded supplementary groups, purifies
environment variables and sets the default umask to 0022.

If needed, it detaches from the current shell and forks in
background, running as a daemon.  If so, it will write a pidfile
at ``/var/run/neubot.pid``.

Unfortunately, as of now, the updater does not install any signal
handler, but the plan is to install a SIGTERM handler that kills
the child Neubot agent process, if any.

The main loop has two control variables: pid (the process ID of
the child Neubot agent process) and lastcheck (the last time the
updater checked for a new release).  The main loop contains a
call to sleep at the beginning, because the main task of the updater
is to sleep in the background.

Periodically the updater wakes up an makes sure that the
Neubot agent is already running.  If not, it forks a child to
run the agent algorithm and remembers its PID to be able to
control it.

Then, it checks for updates, every 30 mins.  If a new update
is available, the updater stops the child Neubot agent process,
if needed, installs the new version and, finally, switches
over to it.  To do that it tries to exec() BASEDIR/start.sh,
which should pick up the new version instead of the running
one.  Note that the exec() does not change the process ID:
nothing will change for launchd(8).

The last step is to monitor the running child, using waitpid(2)
together with WNOHANG.  If the child process exited, the updater
logs the event and arrange things so that it will be started
again at the beginning of next loop.


Starting and stopping the Neubot agent
``````````````````````````````````````

To start the agent, the updater forks a new child and then returns
its PID, so that it's possible to control it.

The child process is wrapper by a giant try..catch block, which
always terminates with os._exit().  We use os._exit() and not
sys.exit() because the latter can be catched by try..catch clauses
and the former cannot.  So, we're sure that the child WILL always
exit.

Then the child process will add VERSIONDIR to Python search
path, because it needs to import some pieces of Neubot in order
to start the agent.  The code installs a signal handler that
breaks out of the POLLER loop as soon as the TERM signal is
received.

Finally, the agent is started in foreground but it is forced
to use syslog because it is actually running in the context of
launchd(8).

Note that the code does not explicitly drop root privileges and
leaves that task to the agent.  When running as root the agent
will always drop privileges to the ``_neubot`` user.

To stop the agent, the updater employs the PID.  Initially it
sends the SIGTERM, for which the code had installed a signal
handler when starting the agent.  It waits for the child to
exit for five seconds.  If it doesn't exit, the code send the
SIGKILL signal and then waits forever for the child to die.

A possible improvement here may be to wait for a smaller amount
of time than forever, and declare the child lost if it's not
possible to kill it.  However, it's not clear whether this would
be better or not: what happens if the child resumes later on?
Are the pending TERM and KILL signals actually delivered?
